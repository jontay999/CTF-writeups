import json
from Crypto.Util.number import long_to_bytes


cipher1, cipher2 = None, None
with open('./encrypted.txt', 'r') as f:
    lines = f.readlines()
    cipher1 = json.loads(lines[0].replace("'", '"'))
    cipher2 = json.loads(lines[1].replace("'", '"'))

#Find common gcd
ct1 = int(cipher1['ct'], 16)
ct2 = int(cipher2['ct'], 16)
n = int(cipher1['n'], 16)

#euclidean method
def gcd(x, y):
    while(y):
        x,y = y, x%y
    return x
e1 = int(cipher1['e'], 16)
e2 = int(cipher2['e'], 16)

#with same moduli
#gcd(e1,e2) = d, there exists e1 x a + e2 x b = d

#calculated using bezout's identity
a = pow(e1,-1,e2)
b = int((gcd(e1,e2) - (a*e1))/e2)

#since gcd of exponents is 1, don't need to inverse root it
res = (pow(ct1, a, n) * pow(ct2,b, n)) %n

print(long_to_bytes(res))

